// Generated automatically from .\src\api.wren. Do not edit.
static const char* apiModuleSource =
"foreign class Image {\n"
"    foreign construct create(width, height)\n"
"    foreign construct create(image)\n"
"\n"
"    foreign set(x, y, color)\n"
"    foreign f_get(x, y)\n"
"    foreign f_clear(color)\n"
"    foreign f_rect(x, y, width, height, color)\n"
"\n"
"    foreign blit(image, x, y)\n"
"    foreign blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight)\n"
"\n"
"    foreign f_blit(image, x, y, key)\n"
"    foreign f_blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key)\n"
"    foreign f_blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key, tint)\n"
"\n"
"    foreign blitAlpha(image, x, y)\n"
"\n"
"    get(x, y) { Color.fromNum(f_get(x, y)) }\n"
"\n"
"    clear(color) {\n"
"        if (color is Color) {\n"
"            f_clear(color.toNum)\n"
"        } else {\n"
"            f_clear(color)\n"
"        }\n"
"    }\n"
"\n"
"    clear() {\n"
"        f_clear(0xFF000000)\n"
"    }\n"
"\n"
"    rect(x, y, width, height, key) {\n"
"        if (color is Color) {\n"
"            f_rect(x, y, width, height, key.toNum)\n"
"        } else {\n"
"            f_rect(x, y, width, height, key)\n"
"        }\n"
"    }\n"
"\n"
"    blit(image, x, y, key) {\n"
"        if (key is Color) {\n"
"            f_blit(image, x, y, key.toNum)\n"
"        } else {\n"
"            f_blit(image, x, y, key)\n"
"        }\n"
"    }\n"
"\n"
"    blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key) {\n"
"        if (key is Color) {\n"
"            f_blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key.toNum)\n"
"        } else {\n"
"            f_blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key)\n"
"        }\n"
"    }\n"
"\n"
"    blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key, tint) {\n"
"        if (key is Color && tint is Color) {\n"
"            f_blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key.toNum, tint.toNum)\n"
"        } else {\n"
"            f_blit(image, dstX, dstY, srcX, srcY, srcWidth, srcHeight, key, tint)\n"
"        }\n"
"    }\n"
"\n"
"    foreign width\n"
"    foreign height\n"
"}\n"
"\n"
"class Color {\n"
"    construct new(r, g, b) {\n"
"        init_(r, g, b, 255)\n"
"    }\n"
"\n"
"    construct new(r, g, b, a) {\n"
"        init_(r, g, b, a)\n"
"    }\n"
"\n"
"    init_(r, g, b, a) {\n"
"        if (r < 0 || r > 255) Fiber.abort(\"Red channel out of range\")\n"
"        if (g < 0 || g > 255) Fiber.abort(\"Green channel out of range\")\n"
"        if (b < 0 || b > 255) Fiber.abort(\"Blue channel out of range\")\n"
"        if (a < 0 || a > 255) Fiber.abort(\"Alpha channel out of range\")\n"
"\n"
"        _r = r\n"
"        _g = g\n"
"        _b = b\n"
"        _a = a\n"
"    }\n"
"\n"
"    toNum { a << 24 | r << 16 | g << 8 | b }\n"
"    static fromNum(v) {\n"
"        var a = v & 0xFF\n"
"        var r = (v >> 8) & 0xFF\n"
"        var g = (v >> 16) & 0xFF\n"
"        var b = (v >> 24) & 0xFF\n"
"        return Color.new(r, g, b, a)\n"
"    }\n"
"\n"
"    toString { \"Color (\" + r.toString + \", \" + g.toString + \", \" + b.toString + \", \" + a.toString + \")\" }\n"
"\n"
"    ==(other) {\n"
"        if (other is Color) {\n"
"            return other.r == r && other.g == g && other.b == b && other.a == a\n"
"        } else {\n"
"            return false\n"
"        }\n"
"    }\n"
"\n"
"    !=(other) {\n"
"        if (other is Color) {\n"
"            return other.r != r || other.g != g || other.b != b || other.a != a\n"
"        } else {\n"
"            return true\n"
"        }\n"
"    }\n"
"\n"
"    r { _r }\n"
"    g { _g }\n"
"    b { _b }\n"
"    a { _a }\n"
"\n"
"    r=(v) {\n"
"        if (v < 0 || v > 255) Fiber.abort(\"Red channel out of range\")\n"
"        _r = v\n"
"    }\n"
"    g=(v) {\n"
"        if (v < 0 || v > 255) Fiber.abort(\"Green channel out of range\")\n"
"        _g = v\n"
"    }\n"
"    b=(v) {\n"
"        if (v < 0 || v > 255) Fiber.abort(\"Blue channel out of range\")\n"
"        _b = v\n"
"    }\n"
"    a=(v) {\n"
"        if (v < 0 || v > 255) Fiber.abort(\"Alpha channel out of range\")\n"
"        _a = v\n"
"    }\n"
"\n"
"    static none { Color.new(0, 0, 0, 0) }\n"
"    static black { Color.new(0, 0, 0) }\n"
"    static darkBlue { Color.new(29, 43, 83) }\n"
"    static darkPurple { Color.new(126, 37, 83) }\n"
"    static darkGreen { Color.new(0, 135, 81) }\n"
"    static brown { Color.new(171, 82, 54) }\n"
"    static darkGray { Color.new(95, 87, 79) }\n"
"    static lightGray { Color.new(194, 195, 199) }\n"
"    static white { Color.new(255, 241, 232) }\n"
"    static red { Color.new(255, 0, 77) }\n"
"    static orange { Color.new(255, 163, 0) }\n"
"    static yellow { Color.new(255, 236, 39) }\n"
"    static green { Color.new(0, 228, 54) }\n"
"    static blue { Color.new(41, 173, 255) }\n"
"    static indigo { Color.new(131, 118, 156) }\n"
"    static pink { Color.new(255, 119, 168) }\n"
"    static peach { Color.new(255, 204, 170) }\n"
"}\n"
"\n"
"class OS {\n"
"    foreign static name\n"
"    foreign static basilVersion\n"
"    foreign static args\n"
"    foreign static f_exit(code)\n"
"\n"
"    static exit(code) {\n"
"        f_exit(code)\n"
"        Fiber.suspend()\n"
"    }\n"
"\n"
"    static exit() {\n"
"        exit(0)\n"
"    }\n"
"}\n"
"\n"
"foreign class FColor {\n"
"    construct new(r, g, b, a) {}\n"
"\n"
"    foreign r\n"
"    foreign g\n"
"    foreign b\n"
"    foreign a\n"
"}\n"
"\n"
"foreign class Timer {\n"
"    construct new() {}\n"
"\n"
"    foreign tick()\n"
"    foreign tick(framerate)\n"
"\n"
"    foreign time\n"
"    foreign delta\n"
"}\n"
"\n"
"class Window {\n"
"    foreign static init(title, width, height)\n"
"    foreign static quit()\n"
"    foreign static update(image)\n"
"    foreign static keyHeld(key)\n"
"    foreign static keyPressed(key)\n"
"    foreign static mouseHeld(button)\n"
"    foreign static mousePressed(button)\n"
"\n"
"    foreign static width\n"
"    foreign static height\n"
"    foreign static title\n"
"    foreign static closed\n"
"    foreign static mouseX\n"
"    foreign static mouseY\n"
"}\n";
